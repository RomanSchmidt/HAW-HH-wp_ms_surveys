variables:
  #DOCKER_DRIVER: overlay
  DOCKER_DRIVER: vfs
  MONGODB_VERSION: "4.2"
  #CI_AWS_ECS_CLUSTER: wp-ms-surveys-cluster
  #CI_AWS_ECS_SERVICE: wp-ms-surveys-survey-service
  #CI_AWS_ECS_TASK_DEFINITION: wp-ms-surveys-survey-task
  MONGO_URI_PM2: mongodb://localhost:27017/wp-ms-surveys_test
  MONGO_URI_MOCHA: mongodb://localhost:27017/wp-ms-surveys
  PORT_SURVEY_PM2: 8090
  PORT_SURVEY_MOCHA: 8080
  PORT_OPINION_PM2: 8091
  PORT_OPINION_MOCHA: 8081
  FOREIGN_SERVICE_OPINION_PM2: http://localhost:$PORT_OPINION_PM2/opinion
  FOREIGN_SERVICE_OPINION_MOCHA: http://localhost:$PORT_OPINION_MOCHA/opinion
  FOREIGN_SERVICE_SURVEY_PM2: http://localhost:$PORT_SURVEY_PM2/survey
  FOREIGN_SERVICE_SURVEY_MOCHA: http://localhost:$PORT_SURVEY_MOCHA/survey
  DIST_PATH_SURVEY: dist/Survey/Test
  DIST_PATH_OPINION: dist/Opinion/Test
  DOCKER_HOST: tcp://localhost:2376

#include:
#  - template: AWS/Deploy-ECS.gitlab-ci.yml

stages:
  - build_local
  - test
  - build_and_push_docker

services:
  - mongo:$MONGODB_VERSION
  - docker:19.03.5-dind

cache:
  paths:
    - node_modules/

#This command is run before all the jobs
#before_script:
#  - docker info
#  - docker login $DOCKER_REPOSITORY -u $REGISTRY_USER -p $REGISTRY_USER_PASSWORD
#  - npm install
#  - npm install mocha -g --save
#  - npm install source-map-support -g --save
#  - npm install typescript -g --save
#  - npm install ts-node -g --save
#  - npm install pm2 -g --save

build_local:
  image: node:12.18.2-slim
  stage: build_local
  before_script:
    - npm install
    - npm install source-map-support -g --save
    - npm install typescript -g --save
    - npm install typescript -g --save
    - npm install ts-node -g --save
  script:
    - npm run build
  artifacts:
    expire_in: 1 days
    when: on_success
    paths:
      - node_modules/
      - src/
      - dist/

testing_survey:
  image: node:12.18.2-slim
  stage: test
  services:
    - mongo:latest
  dependencies:
    - build_local
  before_script:
    - npm install -D
    - npm install source-map-support -g --save
    - npm install typescript -g --save
    - npm install typescript -g --save
    - npm install ts-node -g --save
    - npm install pm2 -g --save
    - npm install mocha -g --save
  script:
    - pm2 start dist/Opinion/index.js --name "opinion" --source-map-support -- --MONGO_URI "$MONGO_URI_PM2" --FOREIGN_SERVICE_SURVEY "$FOREIGN_SERVICE_SURVEY_MOCHA" --PORT "$PORT_OPINION_PM2" --ENVIRONMENT "development"
    - mocha --reporter dot --MONGO_URI=$MONGO_URI_MOCHA --FOREIGN_SERVICE_OPINION=$FOREIGN_SERVICE_OPINION_PM2 --PORT=$PORT_SURVEY_MOCHA --ENVIRONMENT=test $DIST_PATH_SURVEY
    - pm2 kill

testing_opinion:
  image: node:12.18.2-slim
  stage: test
  services:
    - mongo:latest
  dependencies:
    - build_local
  before_script:
    - npm install -D
    - npm install source-map-support -g --save
    - npm install typescript -g --save
    - npm install typescript -g --save
    - npm install ts-node -g --save
    - npm install pm2 -g --save
    - npm install mocha -g --save
  script:
    - pm2 start dist/Survey/index.js --name "survey" --source-map-support -- --MONGO_URI "$MONGO_URI_PM2" --FOREIGN_SERVICE_OPINION "$FOREIGN_SERVICE_OPINION_MOCHA" --PORT "$PORT_SURVEY_PM2" --ENVIRONMENT "development"
    - mocha --reporter dot --MONGO_URI=$MONGO_URI_MOCHA --FOREIGN_SERVICE_SURVEY=$FOREIGN_SERVICE_SURVEY_PM2 --PORT=$PORT_OPINION_MOCHA --ENVIRONMENT=test $DIST_PATH_OPINION
    - pm2 kill

#building_mongo:
#  stage: build_and_push_docker
#  dependencies:
#    - build_local
#    - test
#  script:
#    - docker build -f src/Mongo/Dockerfile --no-cache -t "$REPO:$CI_BUILD_REF_NAME" .
#    - docker push $REPO:$CI_BUILD_REF_NAME

building_survey:
  #image: gitlab/dind
  stage: build_and_push_docker
  tags:
    - dind
    - docker
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  dependencies:
    - build_local
    - testing_survey
  # prebuild
  before_script:
    # python install
    - apk update
    - apk upgrade
    - apk add util-linux pciutils usbutils coreutils binutils findutils grep
    - apk add --no-cache curl jq python3 py3-pip
    # AWS install
    - pip install --upgrade awscli
    # use AWS
    - echo Logging in to Amazon ECR...
    #- aws configure list
    - aws --version
    - apk --no-cache add tzdata openntpd
    - $(aws ecr get-login --region us-east-1 --no-include-email)
    - REPOSITORY_URI=390532851048.dkr.ecr.us-east-2.amazonaws.com/wp-ms-surveys-survey # uri of ECR
    - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
    #- echo REPOSITORY_URI -> $REPOSITORY_URI
    #- echo IMAGE_TAG -> $IMAGE_TAG
  # build
  script:
    - echo build
    #- docker build -f src/Survey/Dockerfile --no-cache -t "$REPOSITORY_URI:$IMAGE_TAG" .
    - docker build -t $REPOSITORY_URI:latest -f ./src/Survey/Dockerfile .
    - echo tag
    - docker tag $REPOSITORY_URI $REPOSITORY_URI:$IMAGE_TAG # add another tag for aws to refer to a source image
    #- docker push $REPO:$CI_BUILD_REF_NAME
  #post build
  after_script:
    - echo Build complete on `date`
    - echo Pusching the Docker images...
    - echo "uri:tag -> $REPOSITORY_URI:$IMAGE_TAG"
    - docker push $REPOSITORY_URI:$IMAGE_TAG
    - docker push $REPOSITORY_URI:latest
    - echo Writing image definitions file...
    - printf '[{"name":"wp-ms-surveys-survey-container","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json # create a file which helps the aws service to find the image
  artifacts:
    paths:
      - imagedefinitions.json

#building_opinion:
#  stage: build_and_push_docker
#  dependencies:
#    - build_local
#    - testing_opinion
#  script:
#    - docker build -f src/Survey/Dockerfile --no-cache -t "$REPO:$CI_BUILD_REF_NAME" .
#    - docker push $REPO:$CI_BUILD_REF_NAME